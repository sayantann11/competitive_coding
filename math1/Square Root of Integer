Square Root of Integer
Problem Description

Given an integer A.

Compute and return the square root of A.

If A is not a perfect square, return floor(sqrt(A)).

DO NOT USE SQRT FUNCTION FROM STANDARD LIBRARY.

NOTE: Do not use sort function from standard library. Users are expected to solve this in O(log(A)) time.



Problem Constraints
0 <= A <= 1010



Input Format
The first and only argument given is the integer A.



Output Format
Return floor(sqrt(A))



Example Input
Input 1:

 11
Input 2:

 9


Example Output
Output 1:

 3
Output 2:

 3


Example Explanation
Explanation:

 When A = 11 , square root of A = 3.316. It is not a perfect square so we return the floor which is 3.
 When A = 9 which is a perfect square of 3, so we return 3.
 
 
 
 
 
int root(int num) {
    int start_index = 0;
    int end_index = 46341;
    int cur;
    long long cur2;
    while (start_index <= end_index) {
        cur = (start_index+end_index)/2;
        cur2 = cur*cur;
        if (cur2 == num || ((cur2<num)&&(cur2+2*cur+1>num))) {
            return cur;
        } else if (cur*cur > num) {
            end_index = cur-1;
        } else {
            start_index = cur+1;
        }
    }
    return -1;
}

int Solution::sqrt(int A) {
    return root(A);
}
