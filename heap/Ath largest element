Problem Description
Given an integer array B of size N.
You need to find the Ath largest element in the subarray [1 to i] where i varies from 1 to N. In other words, find the Ath largest element in the sub-arrays [1 : 1], [1 : 2], [1 : 3], ...., [1 : N].
NOTE: If any subarray [1 : i] has less than A elements then output array should be -1 at the ith index.


Problem Constraints
1 <= N <= 100000
1 <= A <= N
1 <= B[i] <= INT_MAX


Input Format
First argument is an integer A.
Second argument is an integer array B of size N.


Output Format
Return an integer array C, where C[i] (1 <= i <= N) will have the Ath largest element in the subarray [1 : i].


Example Input
Input 1:
 A = 4  
 B = [1 2 3 4 5 6] 
Input 2:
 A = 2
 B = [15, 20, 99, 1]


Example Output
Output 1:
 [-1, -1, -1, 1, 2, 3]
Output 2:
 [-1, 15, 20, 20]


Example Explanation
Explanation 1:
 for i <= 3 output should be -1.
 for i = 4 , Subarray [1:4] has 4 elements 1, 2, 3 and 4. So, 4th maximum element is 1.
 for i = 5 , Subarray [1:5] has 5 elements 1, 2, 3, 4 and 5. So, 4th maximum element is 2.
 for i = 6 , Subarray [1:6] has 6 elements 1, 2, 3, 4, 5 and 6. So, 4th maximum element is 3.
 So, output array is [-1, -1, -1, 1, 2, 3].
 
Explanation 2:
 for i <= 1 output should be -1.
 for i = 2 , Subarray [1:2] has 2 elements 15 and 20. So, 2th maximum element is 15.
 for i = 3 , Subarray [1:3] has 3 elements 15, 20 and 99. So, 2th maximum element is 20.
 for i = 4 , Subarray [1:4] has 4 elements 15, 20, 99 and 1. So, 2th maximum element is 20.
 So, output array is [-1, 15, 20, 20].



Ã—
You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified. Still have a doubt? Checkout Sample Codes for more details.
vector<int> Solution::solve(int A,vector<int> &B) 
{
    priority_queue <int, vector<int>, greater<int> > pq; //stl priority_queue => implements min heap
	int n = B.size(); //number of elements in the input.

	vector<int> ans(n); //final answer
	

	for(int i=0;i<A;i++)
	{
		pq.push(B[i]); //Push the element in the priority queue
		
		//if i<A-1 then definitely answer is -1 as the Ath element is yet to be discovered
		//If i==A-1 that means there are total A elements in the heap/pq therefore the root element
		//would be the Ath largest element
		if(i!=A-1) ans[i] = -1; 
		else ans[i] = pq.top(); 
	}
	
	for(int i=A;i<n;i++)
	{
	    //If the element is greater than the root element then we need to pop the root and add this element
	    //else we ignore the element and our answer will be the root element.
		if(B[i]<=pq.top()) 
		{
			ans[i]=pq.top(); 
		}
		else
		{
			pq.pop();
			pq.push(B[i]);
			ans[i]=pq.top();
		}
	}
	return ans;
}
