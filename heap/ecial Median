Special Median
Problem Description
You are given an array A containing N numbers. This array is called special if it satisfies one of the following properties:
1.	There exists an element A[i] in the array such that A[i] is equal to the median of elements [A[0], A[1], ...., A[i-1]]
2.	There exists an element A[i] in the array such that A[i] is equal to the median of elements [A[i+1], A[i+2], ...., A[N-1]]
Median is the middle element in the sorted list of elements. If the number of elements are even then median will be (sum of both middle elements)/2.
Return 1 if the array is special else return 0.
NOTE:
•  For A[0] consider only the median of elements [A[1], A[2], ..., A[N-1]] (as there are no elements to the left of it)
•  For A[N-1] consider only the median of elements [A[0], A[1], ...., A[N-2]]


Problem Constraints
1 <= N <= 1000000.
A[i] is in the range of a signed 32-bit integer.


Input Format
First and only argument is an integer array A.


Output Format
Return 1 if the given array is special else return 0.


Example Input
Input 1:
 A = [4, 6, 8, 4]
Input 2:
 A = [2, 7, 3, 1]


Example Output
Output 1:
 1
Output 2:
 0


Example Explanation
Explantion 1:
 Here, 6 is equal to the median of [8, 4].
Explanation 2:
 No element satisfies any condition.
#define LL long long
#define INF 1000000000000LL

//Priority_Queue stores numbers as long long because we have to negate the numbers and
// also add two numbers, overflow will result in some corner cases and using long long will avoid it.
priority_queue<LL> minHeap, maxHeap;

void add_number(LL num) {
	//negative of a number is pushed because priority_queue is by defualt a max heap
	
    maxHeap.push(num);
    minHeap.push(-maxHeap.top());
    maxHeap.pop();
    
    if(maxHeap.size() < minHeap.size()) {
        maxHeap.push(-minHeap.top());
        minHeap.pop();
    }
}

LL find_median() {
    if(maxHeap.size() > minHeap.size()) return maxHeap.top();
    else{
    	LL ans = maxHeap.top()-minHeap.top();
    	if(ans%2) return INF;    //answer is a fraction
    	else return ans/2;
    }
}
int Solution::solve(vector<int> &A) {
    int n = A.size();
	
	//clear the priority queues (priority_queue in C++ doesn't have a clear() method)
	minHeap = priority_queue<LL>();
	maxHeap = priority_queue<LL>();
	
	for(int i=0; i < (n-1) ; i++){
		add_number((LL)(A[i]));
		if(A[i+1] == find_median()) return 1;
	}
	
	//clear the priority queues (priority_queue in C++ doesn't have a clear() method)
	minHeap = priority_queue<LL>();
	maxHeap = priority_queue<LL>();
	
	for(int i=n-1; i>0; i--){
		add_number((LL)(A[i]));
		if(A[i-1] == find_median()) return 1;
	}
	
	return 0;
}
