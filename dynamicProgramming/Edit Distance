Edit Distance
Problem Description

Given two strings A and B, find the minimum number of steps required to convert A to B. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character


Problem Constraints
1 <= length(A), length(B) <= 450



Input Format
The first argument of input contains a string, A.
The second argument of input contains a string, B.



Output Format
Return an integer, representing the minimum number of steps required.



Example Input
Input 1:

 A = "abad"
 B = "abac"
Input 2:

 A = "Anshuman"
 B = "Antihuman


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Exlanation 1:

 A = "abad" and B = "abac"
 After applying operation: Replace d with c. We get A = B.
 
Explanation 2:

 A = "Anshuman" and B = "Antihuman"
 After applying operations: Replace s with t and insert i before h. We get A = B.



int Solution::minDistance(string A, string B) {
    string word1 = A;
    string word2 = B;
    // DP talbe, i is the position in word1, and j is the position in word2
    vector < vector < int >> distance(word1.length() + 1, vector < int > (word2.length() + 1, 0));
    // when i or j=0 means empty string, the distance is the length of another string
    for (int i = 0; i < distance.size(); i++) {
        for (int j = 0; j < distance[0].size(); j++) {
            if (i == 0)
                distance[i][j] = j;
            else if (j == 0)
                distance[i][j] = i;
        }
    }
    // if word1[i] == word2[j], then the distance of i and j is the previous i and j
    // otherwise we either replace, insert or delete a char
    // when insert a char to word1 it means we are trying to match word1 at i-1 to word2 at j
    // when delete a char from word1 it equals to insert a char to word2, which
    // means we are trying to match word1 at i to word2 at j-1
    // when replace a char to word1, then we add one step to previous i and j
    for (int i = 1; i < distance.size(); i++) {
        for (int j = 1; j < distance[0].size(); j++) {
            if (word1[i - 1] == word2[j - 1])
                distance[i][j] = distance[i - 1][j - 1];
            else
                distance[i][j] = 1 + min(distance[i - 1][j - 1], min(distance[i - 1][j], distance[i][j - 1]));
        }
    }
    return distance[word1.length()][word2.length()];
}
