Min Sum Path in Matrix
Problem Description

Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.



Problem Constraints
1 <= M, N <= 2000

-1000 <= A[i][j] <= 1000



Input Format
First and only argument is a 2-D grid A.



Output Format
Return an integer denoting the minimum sum of the path.



Example Input
Input 1:

 A = [
       [1, 3, 2]
       [4, 3, 1]
       [5, 6, 1]
     ]
Input 2:

 A = [
       [1, -3, 2]
       [2, 5, 10]
       [5, -5, 1]
     ]


Example Output
Output 1:

 8
Output 2:

 -1


Example Explanation
Explanation 1:

 The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:

 The path will be: 1 -> -3 -> 5 -> -5 -> 1.
 
 
 sollution:
 int Solution::minPathSum(vector < vector < int > > & A) {
    if (A.size() == 0) 
        return 0;
    int m = A.size(), n = A[0].size();
    int minPath[m + 1][n + 1];
    for (int i = 0; i < m; i++) {
        minPath[i][0] = A[i][0];
        if (i > 0) minPath[i][0] += minPath[i - 1][0];
        for (int j = 1; j < n; j++) {
            minPath[i][j] = A[i][j] + minPath[i][j - 1];
            if (i > 0) minPath[i][j] = min(minPath[i][j], A[i][j] + minPath[i - 1][j]);
        }
    }
    return minPath[m - 1][n - 1];
}
