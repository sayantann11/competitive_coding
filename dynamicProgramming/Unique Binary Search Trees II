Unique Binary Search Trees II
Problem Description

Given an integer A, how many structurally unique BST's (binary search trees) exist that can store values 1...A?



Problem Constraints
1 <= A <=18



Input Format
First and only argument is the integer A



Output Format
Return a single integer, the answer to the problem



Example Input
Input 1:

 1
Input 2:

 2


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Only single node tree is possible.
Explanation 2:

 2 trees are possible, one rooted at 1 and other rooted at 2.
 
 
 solutions:
 
int Solution::numTrees(int n) {
   if (n == 0)
                return 1;
            if (n == 1)
                return 1;
            int result[n + 1];
            memset(result, 0, sizeof(result));
            result[0] = 1;
            result[1] = 1;
            if (n < 2) {
                return result[n];
            }
            for (int i = 2; i <= n; i++) {
                for (int k = 1; k <= i; k++) {
                    result[i] = result[i] + result[k - 1] * result[i - k];
                }
            }
            return result[n];
}
